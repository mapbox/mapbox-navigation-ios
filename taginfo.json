{
  "data_format": 1,
  "project": {
    "name": "Mapbox Navigation SDK for iOS",
    "description": "User interface and components for turn-by-turn navigation in iOS applications for iPhone, iPad, and CarPlay. Powered by the Mapbox Directions API. Some tags are ðŸ“± shown in UI, ðŸ—£ spoken out loud, or ðŸ”¨ available in code. Some tags are limited to ðŸš— driving, ðŸš² cycling, or ðŸ‘Ÿ walking profiles.",
    "project_url": "https://docs.mapbox.com/ios/navigation/",
    "doc_url": "http://docs.mapbox.com/ios/api/navigation/",
    "icon_url": "https://static-assets.mapbox.com/branding/favicon/v1/favicon-16x16.png",
    "contact_name": "Minh Nguyen",
    "contact_email": "minh@mapbox.com"
  },
  "tags": [
    {
      "key": "access",
      "value": "private",
      "object_types": ["way"],
      "description": "ðŸ”¨ In code, the Intersection.outletRoadClasses property is set to RoadClasses.restricted."
    },
    {
      "key": "bridge",
      "value": "movable",
      "object_types": ["way"],
      "description": "ðŸ”¨ ðŸš—ðŸš² In code, RouteStep.transportType is set to TransportType.movableBridge."
    },
    {
      "key": "destination",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In code, use the RouteStep.destinations property."
    },
    {
      "key": "destination:forward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In code, use the RouteStep.destinations property."
    },
    {
      "key": "destination:backward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In code, use the RouteStep.destinations property."
    },
    {
      "key": "destination:street",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance if destination=* is unspecified. Common words abbreviated. Interpreted as semicolon-delimited list. In code, use the RouteStep.destinations property."
    },
    {
      "key": "destination:ref",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In ðŸ‡ºðŸ‡¸, represented by route shield image chosen based on prefix and/or containing state. In code, use the RouteStep.destinationCodes property."
    },
    {
      "key": "destination:ref:forward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In ðŸ‡ºðŸ‡¸, represented by route shield image chosen based on prefix and/or containing state. In code, use the RouteStep.destinationCodes property."
    },
    {
      "key": "destination:ref:backward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. Common words abbreviated. Interpreted as semicolon-delimited list. In ðŸ‡ºðŸ‡¸, represented by route shield image chosen based on prefix and/or containing state. In code, use the RouteStep.destinationCodes property."
    },
    {
      "key": "driving_side",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Affects roundabout icons in top banner and step table and U-turn lane icons in top banner. In code, use the RouteStep.drivingSide property."
    },
    {
      "key": "highway",
      "value": "footway",
      "object_types": ["way"],
      "description": "ðŸ”¨ ðŸ‘Ÿ In code, adjust the RouteOptions.walkwayPriority property to try to prefer or avoid the way. Valhalla-powered profiles only."
    },
    {
      "key": "highway",
      "value": "motorway",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Generally suppresses name=* in top banner, step table, and voice guidance if ref=* is specified. In code, the Intersection.outletRoadClasses property is set to RoadClasses.motorway. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.motorway to avoid the way."
    },
    {
      "key": "highway",
      "value": "motorway_link",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. In code, the RouteStep.maneuverType property is set to ManeuverType.takeOnRamp or ManeuverType.takeOffRamp. In code, the Intersection.outletRoadClasses property is set to RoadClasses.motorway. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.motorway to avoid the way."
    },
    {
      "key": "highway",
      "value": "trunk",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Generally suppresses name=* in top banner, step table, and voice guidance if ref=* is specified. In code, the Intersection.outletRoadClasses property is set to RoadClasses.motorway. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.motorway to avoid the way."
    },
    {
      "key": "highway",
      "value": "trunk_link",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in top banner and step table and mentioned in voice guidance. In code, the RouteStep.maneuverType property is set to ManeuverType.takeOnRamp or ManeuverType.takeOffRamp. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.motorway to avoid the way."
    },
    {
      "key": "highway",
      "value": "traffic_signals",
      "object_types": ["node"],
      "description": "ðŸ“±ðŸ”¨ The map shows a traffic light icon at the intersection along the route. In code, use the Intersection.trafficSignal property."
    },
    {
      "key": "highway",
      "value": "stop",
      "object_types": ["node"],
      "description": "ðŸ“±ðŸ”¨ The map shows a stop sign icon at the intersection along the route. In code, use the Intersection.stopSign property."
    },
    {
      "key": "highway",
      "value": "give_way",
      "object_types": ["node"],
      "description": "ðŸ“±ðŸ”¨ The map shows a yield sign icon at the intersection along the route. In code, use the Intersection.yieldSign property."
    },
    {
      "key": "railway",
      "value": "level_crossing",
      "object_types": ["node"],
      "description": "ðŸ“±ðŸ”¨ The map shows a railroad crossing icon at the intersection along the route. In code, use the Intersection.railroadCrossing property."
    },
    {
      "key": "hov",
      "object_types": ["way"],
      "description": "ðŸ”¨ In code, the Intersection.outletRoadClasses property is set to RoadClasses.restricted."
    },
    {
      "key": "junction:ref",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ ðŸš— Shown in top banner and step table and mentioned in voice guidance. Interpreted as semicolon-delimited list. In code, use the RouteStep.exitCodes property."
    },
    {
      "key": "junction",
      "value": "circular",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ ðŸš— Shown in top banner and step table and mentioned in voice guidance. In code, the RouteStep.maneuverType property is set to ManeuverType.takeRotary and ManeuverType.exitRotary."
    },
    {
      "key": "junction",
      "value": "roundabout",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ ðŸš— Shown in top banner and step table and mentioned in voice guidance. In code, the RouteStep.maneuverType property is set to ManeuverType.takeRoundabout and ManeuverType.exitRoundabout (ManeuverType.turnAtRoundabout for roundabouts with very small diameter)."
    },
    {
      "key": "maxspeed",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in corner of map. Converted into the local speed unit and rounded to the nearest 5. In code, use the RouteLeg.segmentMaximumSpeedLimits or RouteLegProgress.currentSpeedLimit property. OSRM-powered profiles only."
    },
    {
      "key": "maxspeed:forward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in corner of map. Converted into the local speed unit and rounded to the nearest 5. In code, use the RouteLeg.segmentMaximumSpeedLimits or RouteLegProgress.currentSpeedLimit property. OSRM-powered profiles only."
    },
    {
      "key": "maxspeed:backward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in corner of map. Converted into the local speed unit and rounded to the nearest 5. In code, use the RouteLeg.segmentMaximumSpeedLimits or RouteLegProgress.currentSpeedLimit property. OSRM-powered profiles only."
    },
    {
      "key": "name",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ Shown in current road name label at bottom of map, shown in top banner and step table, and mentioned in voice guidance. Common words abbreviated except in voice guidance. Pronounced according to current application language and name:pronunciation=*. In code, use the RouteStep.names property (RouteStep.exitNames if junction=circular/roundabout). The RouteLeg.description and Waypoint.name properties may contain the wayâ€™s name."
    },
    {
      "key": "name:pronunciation",
      "object_types": ["way"],
      "description": "ðŸ—£ðŸ”¨ Affects voice guidance, subject to TTS engine support. Interpreted as IPA in semicolon-delimited list. In code, use the RouteStep.phoneticNames property (RouteStep.phoneticExitNames if junction=circular). OSRM-powered profiles only."
    },
    {
      "key": "ref",
      "object_types": ["node", "way"],
      "description": "ðŸ“±ðŸ—£ðŸ”¨ For highway=* ways and highway=motorway_junction nodes, values are shown in top banner and step table and mentioned in voice guidance. Interpreted as semicolon-delimited list. For highway=* ways in ðŸ‡ºðŸ‡¸, represented by route shield image chosen based on prefix and/or containing state. In code, use the RouteStep.codes property."
    },
    {
      "key": "railway",
      "object_types": ["way"],
      "description": "ðŸ”¨ ðŸš² In code, RouteStep.transportType is set to TransportType.train."
    },
    {
      "key": "route",
      "value": "ferry",
      "object_types": ["way"],
      "description": "ðŸ”¨ In code, RouteStep.transportType is set to TransportType.ferry. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.ferry to avoid the way."
    },
    {
      "key": "service",
      "value": "alley",
      "object_types": ["way"],
      "description": "ðŸ”¨ ðŸ‘Ÿ In code, adjust the RouteOptions.alleyPriority property to try to prefer or avoid the way. Valhalla-powered profiles only."
    },
    {
      "key": "toll",
      "object_types": ["way"],
      "description": "ðŸ”¨ In code, the Intersection.outletRoadClasses property is set to RoadClasses.toll. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.toll to avoid the way."
    },
    {
      "key": "tunnel",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ All UI elements (including map) temporarily switch to night/dark style. Simulates passing through tunnel in lieu of GPS updates. In code, the Intersection.outletRoadClasses property is set to RoadClasses.tunnel. Set the RouteOptions.roadClassesToAvoid property to RoadClasses.tunnel to avoid the way."
    },
    {
      "key": "turn:lanes",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in top banner. None values may cause entire tag to be ignored. In OSRM-powered profiles, values that conflict with OSRM turn angle heuristics are ignored unless overridden by manoeuvre relations. In code, use the Lane.indications property and the indications argument of VisualInstruction.Component.lane(indications:isUsable:)."
    },
    {
      "key": "turn:lanes:forward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in top banner. None values may cause entire tag to be ignored. In OSRM-powered profiles, values that conflict with OSRM turn angle heuristics are ignored unless overridden by manoeuvre relations. In code, use the Lane.indications property and the indications argument of VisualInstruction.Component.lane(indications:isUsable:)."
    },
    {
      "key": "turn:lanes:backward",
      "object_types": ["way"],
      "description": "ðŸ“±ðŸ”¨ ðŸš— Shown in top banner. None values may cause entire tag to be ignored. In OSRM-powered profiles, values that conflict with OSRM turn angle heuristics are ignored unless overridden by manoeuvre relations. In code, use the Lane.indications property and the indications argument of VisualInstruction.Component.lane(indications:isUsable:)."
    },
    {
      "key": "type",
      "value": "route",
      "object_types": ["relation"],
      "description": "ðŸ“±ðŸ—£ ðŸš— A north/south/east/west role causes cardinal direction to appear in top banner and step table and be mentioned in voice guidance after each ref=* or destination:ref=* value."
    }
  ]
}
